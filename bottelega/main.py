import constantimport telebotfrom telebot import typesbot = telebot.TeleBot(constant.TOKEN)print(bot.get_me())def log(message):    print("\n....")    from datetime import datetime    print(datetime.now())    print("сообщение от {0} {1}. (id={2}) \n Текст - {3}".format(message.from_user.first_name,                                                                message.from_user.last_name,                                                                str(message.from_user.id),                                                                message.text))    print("\n....")@bot.message_handler(commands=["start"])def start(message):    log(message)    sent = bot.send_message(message.chat.id, "Как тебя зовут?")    bot.register_next_step_handler(sent, hello)def hello(message):    log(message)    bot.send_message(message.chat.id, "Привет, {name}. Рад тебя видеть. Пожалуйста, отправте мне свой"                                      "номер для этого есть команда /phone".format(name=message.text))@bot.message_handler(commands=["phone"])def phone(message):    log(message)    user_markup = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True, one_time_keyboard=True)    button_phone = types.KeyboardButton(text="Отправить номер телефона", request_contact=True)    user_markup.add(button_phone)    msg = bot.send_message(message.chat.id, "Согласны ли вы предоставить ваш номер телефона для"                                            "регистрации в системе?", reply_markup=user_markup)    bot.register_next_step_handler(msg, main_menu)@bot.message_handler()def main_menu(message):    log(message)    user_markup = types.ReplyKeyboardMarkup(resize_keyboard=True)    user_markup.add(*[types.KeyboardButton(name) for name in ["Прайс"]])    user_markup.add(*[types.KeyboardButton(name) for name in [" Доставка", "Новости"]])    user_markup.add(*[types.KeyboardButton(name) for name in ["о нас", "Контакты"]])    user_markup.add(*[types.KeyboardButton(name) for name in ["⚙ Настройки"]])    mess = bot.send_message(message.chat.id, "выбери из меню", reply_markup=user_markup)    bot.register_next_step_handler(mess, menu)    #print('\n...\nтелефон  {} \nID пользователя   {}\n...'.format(message.contact.phone_number, message.contact.user_id))@bot.message_handler("text")def menu(message):    log(message)    if message.text == "Прайс":        t = "ознакомесь"        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)        callback_button = types.InlineKeyboardButton(text="Специальное предложение", callback_data="test")        keyboard.add(callback_button)        keyboard.add(*[types.KeyboardButton(name) for name in ["Эспрессо смеси", "моносоротва"]])        keyboard.add(*[types.KeyboardButton(name) for name in ["⏪ Назад ⏪"]])        mess1 = bot.send_message(message.chat.id, t,  parse_mode="HTML", reply_markup=keyboard)        bot.register_next_step_handler(mess1, menu1)    if message.text == "Новости":        j = "Оставайтесь в курсе новостей и акций компании <b>The Firs CUP</b>" \            "\n https://www.instagram.com/the_first_cup/"        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)        keyboard.add(*[types.KeyboardButton(name) for name in ["⏪ Назад ⏪"]])        bot.send_message(message.chat.id, j, parse_mode="HTML", reply_markup=keyboard)    if message.text == "⚙ Настройки":        j = "<b>TFC</b>\n   \nнайстройки"        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)        keyboard.add(*[types.KeyboardButton(name) for name in ["⏪ Назад ⏪"]])        log(message)        bot.send_message(message.chat.id, j, parse_mode="HTML", reply_markup=keyboard)    if message.text == "Контакты":        k = "<b>The Firs CUP</b>\n" \            "\n<b> Телефоны </b>"        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)        keyboard.add(*[types.KeyboardButton(name) for name in ["⏪ Назад ⏪"]])        log(message)        bot.send_message(message.chat.id, k, parse_mode="HTML", reply_markup=keyboard)    if message.text == "о нас":        t = "1"        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)        keyboard.add(*[types.KeyboardButton(name) for name in ["⏪ Назад ⏪"]])        log(message)        bot.send_message(message.chat.id, t, parse_mode="HTML", reply_markup=keyboard)    if message.text == "⏪ Назад ⏪":        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)        markup.add(*[types.KeyboardButton(name) for name in [" Заказать "]])        markup.add(*[types.KeyboardButton(name) for name in [" о нас", " Контакты"]])        markup.add(*[types.KeyboardButton(name) for name in ["⚙️Настройки"]])        log(message)@bot.message_handler("text")def menu1(message):    log(message)    if message.text == "Эспрессо смеси":        t = "здесь вы можитеознакомиться с блендами"        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)        cb_1 = types.InlineKeyboardButton(text="сезонные смеси", callback_data="test")        keyboard.add(cb_1)        keyboard.add(*[types.KeyboardButton(name) for name in ["100% арабика", "с робустой"]])        keyboard.add(*[types.KeyboardButton(name) for name in ["⏪ Назад ⏪"]])        mess2 = bot.send_message(message.chat.id, t,  parse_mode="HTML", reply_markup=keyboard)        bot.register_next_step_handler(mess2, menu2)    if message.text == "⏪ Назад ⏪":        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)        markup.add(*[types.KeyboardButton(name) for name in [" Заказать "]])        markup.add(*[types.KeyboardButton(name) for name in [" о нас", " Контакты"]])        markup.add(*[types.KeyboardButton(name) for name in ["⚙️Настройки"]])@bot.message_handler("text")def menu2(message):    log(message)    if message.text == "100% арабика":        t = "здесь вы можитеознакомиться с блендами из 100% арабики"        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)        keyboard.add(*[types.KeyboardButton(name) for name in ["смесь 1", "смесь 2"]])        keyboard.add(*[types.KeyboardButton(name) for name in ["⏪ Назад ⏪"]])        blend = bot.send_message(message.chat.id, t,  parse_mode="HTML", reply_markup=keyboard)        bot.register_next_step_handler(blend, menuBlend)    if message.text == "⏪ Назад ⏪":            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)            markup.add(*[types.KeyboardButton(name) for name in [" Заказать "]])            markup.add(*[types.KeyboardButton(name) for name in [" о нас", " Контакты"]])            markup.add(*[types.KeyboardButton(name) for name in ["⚙️Настройки"]])@bot.message_handler("text")def menuBlend(message):    log(message)    if message.text == "смесь 1":        t = "смесь 1"        keyboard = types.InlineKeyboardMarkup(row_width=2)        cb_1 = types.InlineKeyboardButton(text="+", callback_data="смесь 1")        cb_2 = types.InlineKeyboardButton(text="1", callback_data="смесь 1")        cb_3 = types.InlineKeyboardButton(text="-", callback_data="смесь 1")        keyboard.add( cb_1, cb_2, cb_3)        blend = bot.send_message(message.chat.id, t, parse_mode="HTML", reply_markup=keyboard)        bot.register_next_step_handler(blend, menu)    if message.text == "смесь 2":        t = "смесь 2"        keyboard = types.InlineKeyboardMarkup(row_width=2)        url_button = types.InlineKeyboardButton(text="URL", url="https://ya.ru")        callback_button = types.InlineKeyboardButton(text="Callback", callback_data="test")        switch_button = types.InlineKeyboardButton(text="Switch", switch_inline_query="Telegram")        keyboard.add(url_button, callback_button, switch_button)        blend = bot.send_message(message.chat.id, t, parse_mode="HTML", reply_markup=keyboard)        bot.register_next_step_handler(blend, menu)@bot.callback_query_handler(func=lambda call: True)def callback_inline(call):    # Если сообщение из чата с ботом    if call.message:        if call.data == "смесь 1":            bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text="Пыщь")    # Если сообщение из инлайн-режима    elif call.inline_message_id:        if call.data == "test":            bot.edit_message_text(inline_message_id=call.inline_message_id, text="Бдыщь")bot.polling(none_stop=True, interval=0)